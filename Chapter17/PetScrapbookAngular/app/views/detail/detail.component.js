"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("nativescript-angular/router");
var page_service_1 = require("../../services/page.service");
require("rxjs/add/operator/switchMap");
var modal_dialog_1 = require("nativescript-angular/modal-dialog");
var select_date_component_1 = require("../modals/select-date/select-date.component");
var select_gender_component_1 = require("../modals/select-gender/select-gender.component");
var camera = require("nativescript-camera");
var geolocation = require("nativescript-geolocation");
var image_source_1 = require("image-source");
var DetailComponent = (function () {
    function DetailComponent(routerExtensions, pageService, pageRoute, modalService, viewContainerRef) {
        this.routerExtensions = routerExtensions;
        this.pageService = pageService;
        this.pageRoute = pageRoute;
        this.modalService = modalService;
        this.viewContainerRef = viewContainerRef;
    }
    DetailComponent.prototype.ngOnInit = function () {
        var id;
        this.pageRoute.activatedRoute
            .switchMap(function (activatedRoute) { return activatedRoute.params; })
            .forEach(function (params) {
            id = +params["id"];
        });
        this.page = this.pageService.getPage(id);
        if (this.page === null) {
            this.page = { Id: id };
        }
    };
    DetailComponent.prototype.onDoneTap = function () {
        this.pageService.savePage(this.page);
        var options = {
            clearHistory: true
        };
        this.routerExtensions.navigate(["list"], options);
    };
    DetailComponent.prototype.onBirthDateTap = function () {
        var _this = this;
        var options = {
            context: this.page.BirthDate,
            fullscreen: true,
            viewContainerRef: this.viewContainerRef
        };
        this.modalService.showModal(select_date_component_1.SelectDateComponent, options)
            .then(function (dialogResult) {
            _this.page.BirthDate = dialogResult;
            var now = Date.now();
            var diff = Math.abs(now - _this.page.BirthDate) / 1000 / 31536000;
            _this.page.Age = diff.toFixed(1);
        });
    };
    DetailComponent.prototype.onGenderTap = function () {
        var _this = this;
        var options = {
            context: this.page.Gender,
            fullscreen: true,
            viewContainerRef: this.viewContainerRef
        };
        this.modalService.showModal(select_gender_component_1.SelectGenderComponent, options)
            .then(function (dialogResult) {
            _this.page.Gender = dialogResult;
        });
    };
    DetailComponent.prototype.onAddImageTap = function () {
        var _this = this;
        if (!geolocation.isEnabled()) {
            geolocation.enableLocationRequest();
        }
        camera.takePicture({ width: 100, height: 100, keepAspectRatio: true })
            .then(function (picture) {
            var image = new image_source_1.ImageSource();
            image.fromAsset(picture).then(function (imageSource) {
                _this.page.Image = imageSource;
                _this.page.ImageBase64 = _this.page.Image.toBase64String("png");
            });
            geolocation.getCurrentLocation(null)
                .then(function (location) {
                _this.page.Lat = location.latitude;
                _this.page.Long = location.longitude;
            });
        });
    };
    return DetailComponent;
}());
DetailComponent = __decorate([
    core_1.Component({
        selector: "detail",
        providers: [page_service_1.PageService],
        templateUrl: "views/detail/detail.html",
        styleUrls: ["views/detail/detail.css"]
    }),
    __metadata("design:paramtypes", [router_1.RouterExtensions,
        page_service_1.PageService,
        router_1.PageRoute,
        modal_dialog_1.ModalDialogService,
        core_1.ViewContainerRef])
], DetailComponent);
exports.DetailComponent = DetailComponent;
//# sourceMappingURL=data:application/json;base64,